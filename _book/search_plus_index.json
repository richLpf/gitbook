{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. 文档预览1.1. 简介1.2. 初衷1.3. 关于文档1.4. 预计更新内容1.5. 本文档思维导图1.6. 欢迎加群交流1. 文档预览 1.1. 简介 本文档包括： Git的入门 Git的命令汇总 Git的进阶 工作中常见Git问题汇总 Github的使用 Github Action Gitlab的使用 CI/CD 1.2. 初衷 最近辅导刚入职的毕业新生，发现刚开始工作的同事对于Git简直是迷茫的不行。 许许多多的坑还在等着他们去踩，想起自己以前刚接触Git的时候，对于Git系列的痛苦也是很心酸。 所以在工作之余写下这个文档，并且尝试录制视频来讲解下git相关的内容，希望可以帮助到一些刚刚接触到git的同学。 1.3. 关于文档 Git对于大多数程序员来说，基本是天天要使用的工具。 但很多时候，我们仅仅用了git一部分功能。 在遇到回退、配置、分支管理等解决一些具体的问题时，还是要不断的查命令去解决。 从这个角度来说收藏这个文档可以帮助你快速的解决常见和进阶的一些问题。 1.4. 预计更新内容 git基础 图形化工具-sourceTree 图形化工具-smartGit 工作中常见的问题 1.5. 本文档思维导图 待添加 1.6. 欢迎加群交流 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"base/":{"url":"base/","title":"git基础","keywords":"","body":"1. git基础1.1. 了解Git1.2. 安装、配置1.3. 快速上手Git1.4. 参考资料1. git基础 本章针对于初学者和对git没有全面了解的同学，如果你是老司机，可以跳过这一章节，直接阅读自己感兴趣的章节。 1.1. 了解Git 版本控制 本地版本控制 集中化版本控制 分布式版本控制 Git的优势 快 分布式 索引 安全 Git的三个概念 工作区 暂存区 Git仓库 1.2. 安装、配置 安装 配置 config 帮助 1.3. 快速上手Git 本地项目的操作 忽略文件 分支操作 命令总览 1.4. 参考资料 git文档 git官网 git博客 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"base/版本控制.html":{"url":"base/版本控制.html","title":"版本控制","keywords":"","body":"1. 版本控制1.1. 本地版本控制1.2. 集中化版本控制1.3. 分布式版本控制1.4. 各个版本的区别1. 版本控制 1.1. 本地版本控制 如果我写一本书，书有很多的章节， 一个人编辑，一段时间后我们完成了一个版本v1.0.0, 那么我要保存这个版本，就需要在本地复制一份，标识成v1.0.0, 为了节省空间我们常常要压缩，这就是压缩包v1.0.0 接着后面有v1.0.1, v1.1.0 版本，这样保存在本地，如果在v1.1.0中不小心删除了一个章节的内容，我们可能会解压上一个版本的压缩包，进行对比，复原。 这样将每个版本保存在本地，就叫本地的版本控制 1.2. 集中化版本控制 本地的版本控制，我们可以很明显看到的缺陷，就是无法多人共享，操作复杂，对比麻烦。 那么为了解决这个情况，就出现了集中化版本控制。 在另外一台计算机（远程服务器）上面放置文件和版本信息， 每次写书的时候，拉取拉区最新的版本，开始写，写完提交， 如果想看某个版本，可以将过去的版本下载下来。 多人开发的时候，只需要知道远程的地址，将最新的版本拉下来，就可以了 集中化版本控制，我们看到解决了多人共享，操作复杂的问题。 不过他的弊端也有：比如完成了一个要发布的版本v1.0.3, 但是没有网络，我无法将v1.0.3同步到仓库，这时也就没有办法继续写最新的版本。 同时如果想要进行不同版本的比对，其实还是要把老版本下载到本地进行比对。 典型的版本管理工具：svn 1.3. 分布式版本控制 那想要解决上面的问题，就出现了分布式版本控制，代表就是Git, 他的优秀在于他的简单、快、便于多人协作，分布式提交，随时回退。 当我们用Git管理项目，是这样的。 首先我们写了一本书，将这本书所在的文件夹作为一个Git仓库，我们只需要将写的东西通过git的命令，进行提交，git会对每个文件进行管理。 需要发布v1.0.0版本，Git只需要标记一下，相当于做了个快照，继续写v1.0.2版本，可以在本地不断的提交。 想要之前的某个版本，只需要将Git指向某个快照，通过索引可以对比这两个版本的变化。 这个项目如果只是一个人用，只需要放在本地就可以了。 多人合作的化，将仓库同步到远程仓库（github、gitlab等），本地提交后，直接同步一下远程仓库，不需要实时提交，只需要在有网络的时候，同步一下就可以了。 1.4. 各个版本的区别 本地版本管理，适用于各种备份，必须要对比各个版本的区别，只需要做到复原源文件。多用于数据库备份，文件备份等。 集中式版本管理，对于多人协作不太友好，却对大文件的管理，对比性不强的大图片等友好。 分布式管理，由于每个版本都会保存一份，对于小文件，比如代码、书籍等以小文件为主，多人协作开发，机其友好。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"base/优势.html":{"url":"base/优势.html","title":"git的优势","keywords":"","body":"1. SVN和Git的原理对比1.1. SVN的原理和特点1.2. Git的原理和特点1. SVN和Git的原理对比 1.1. SVN的原理和特点 SVN 是基于差异记录的版本控制，每次提交记录的是本地提交和上个版本的差异，然后通过计算得出当前的版本，具体看下图。 图解初始仓库版本一有文件ABC, 1、在版本一的基础上，修改文件A，修改部分为a1，修改文件C，修改部分为c2,提交版本二记录A文件：A+a1， B文件：B, C文件为C+c1 2、接着修改版本二,修改部分为c3, 提交版本三：A+a1, B, C+c1+c2 3、接着修改版本三,修改部分为a3,b3,提交版本四：A+a1+a3, B+b3, C+c1+c2 我们可以看到SVN记录的是，初始文件和每次更新的差异部分。通过计算初始文件和提交版本差异，得到最终的文件版本。这也就导致了当文件越来越多的时候，SVN拉取速度越来越慢。 同时SVN的服务器上版本存放在一个地方，文件存在另一个地方。这就导致了当本地主机，没有联网是没有办法提交版本的。 1.2. Git的原理和特点 Git是分布式的版本控制，设计的目标就是速度，简单设计，支持多人开发，分布式，适合大型项目。其版本管理原理图： git文件的记录方式为：初始化文件ABC 1、在版本一的基础上修改A文件，修改后的文件为A1（注意，这里不是差异部分）,修改文件C，修改后的文件为C1, 提交版本二，这时Git记录快照A1+B+C1 2、在版本二的基础上修改文件C1，修改后的文件记C2，提交版本三，这时Git记录快照为A1+B+C2 3、在版本三的基础上，修改文件A1为A2，修改文件B为B1，提交版本四，这时记录快照为A2+B1+C2 这是版本三和版本二的区别可以通过diff算法计算，而本地切换不同的版本只需要将当前快照检出，这速度是很快的。 git每次修改会将快照压缩，增加索引记录在本地.git文件夹中，所以几乎所有的Git操作都是在本地执行，不需要依赖远程仓库，包括版本提交，和分支检出，这就很快了。 如果需要多人开发，只需要实时将本地仓库同步到服务器的仓库，而其他人只需要通过git clone 命令将仓库下载到自己的电脑上，这样自己的本地就可以有一个一样的仓库，包括之间的提交历史。开发完毕后，同步到远程，只需要在执行同步远程是联网就可以了。这就做到了支持多人开发。接着由于每个人和远程仓库都是完整的代码仓库，所以不管自己的电脑或是远程仓库的代码丢失，只需要本地有一份就可以恢复所有，这就是分布式的优势。 但Git适用于小文件管理，如果文件太大就会导致每次提交打包一份，导致文件太大。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"base/概念.html":{"url":"base/概念.html","title":"git三个概念","keywords":"","body":"1. git三个概念1.1. 工作区1.2. 暂存区1.3. 版本仓库1. git三个概念 想要使用Git，必须要知道三个基本的概念：工作区、暂存区、版本仓库 首先我们通过git init初始化一个文件夹为demo项目的版本仓库。 1.1. 工作区 用编辑器打开demo文件夹，我们看到的就是工作区的内容。 在工作区，我们可以对文件进行增删改查，确认没问题的文件可以提交到暂存区 1.2. 暂存区 通过命令git add,我们看到的文件会增加索引，保存在git管理的一个区，我们看不到，可以通过git status或git diff 看到,这个区就是暂存区。 由Git原理我们可以知道，暂存区仅仅会保存修改的或新增的文件。如果没有更改暂存区就是空的。 暂存区不会记录快照，可以随时恢复到工作区，也可以通过提交命令，提交到版本仓库，它是连接工作区和本地版本仓库的优秀设计。 暂存区是原子提交，代表要么将暂存区的内容全部提交到仓库，要么全部不提交。 1.3. 版本仓库 版本仓库、索引库、Git仓库，这几个说的代表的都是同一个概念，版本仓库。 版本仓库又分为两种，本地版本仓库和远程版本仓库，二者又是相对的，可以互为远程仓库。 版本仓库就是Git每次进行快照的地方，通过git命令，可以将文件的版本压缩，增加索引，放在目录.git文件夹中。 版本仓库通过.git目录管理，所以Git的操作大都在本地，只会在多人协作时，同步到远程仓库。 远程仓库一般在会搭建在服务器上，通过网络可以让不同地点不同时间的人，只要有网络就可以将这个demo仓库同步到本地，这样其他人就可以在自己的电脑上就行开发了 Git管理的文件状态有：已暂存、已修改、已提交 已暂存：修改或新建的文件，提交到暂存区后 已修改：仅修改的文件 已提交：暂存区的文件，提交到仓库 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"base/config.html":{"url":"base/config.html","title":"安装配置","keywords":"","body":"1. 安装配置1.1. window安装，只需要到官网下载安装包就可以了1.2. Git的环境变量配置1.3. Git的用户信息配置1. 安装配置 git的安装很简单： 分为源码安装和安装包安装，我们选择安装包安装就可以了 1.1. window安装，只需要到官网下载安装包就可以了 下载地址：https://git-scm.com/download/win 安装完成后，鼠标右键会发现增加了git bash/git gui 两个命令 我们点击git bash命令，会出现一个命令提示符，执行git --version就可以看到安装的git版本 1.2. Git的环境变量配置 首先查看Git的所有配置和所在文件 git config --list --show-origin Git可以读取的变量信息包括三个地方 1、所在系统的 linux: /etc/gitconfig window: $HOME 一般为C:\\Users$USER.gitconfig 2、当前用户的 linux: ~/.gitconfig 或 ~/.config/git/config window： 3、git仓库目录中 linux/window: .git/config git读取的配置会相互覆盖，3的权重最高，2的权重次之，1的权重最低 1.3. Git的用户信息配置 第一次运行Git前需要配置用户信息 username 可以自定义用户名，之后每次提交版本将会显示改名称 email 自己的用户邮箱，之后提交会显示出来 git config --global user.name git config --global user.email 读取配置信息 读取所有的用户信息 git config --list 读取用户名 git config user.name 读取用户邮箱 git config user.email console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"base/help.html":{"url":"base/help.html","title":"help","keywords":"","body":"1. help1. help Git的帮助命令设计的很好，分为常用的提示和文档提示 简单命令 git -h 打开帮助文档 git --help git help 如果遇到常用的命令branch不熟悉，我们可以执行下面命令 git branch -h 命令展示如下：基本的用法、通用的命令、特有的命令 如果找不到我们要使用的命令，我们还可以使用下面命令打开git本地的文档 查看git branch的文档,使用下面两个命令均可 git branch --help git help branch 打开如下所示的文档 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"base/option.html":{"url":"base/option.html","title":"项目实战","keywords":"","body":"1. 项目实战1.1. 方法一：1.2. 方法二：1. 项目实战 这里我们通过实际讲解创建一个git仓库，并关联远程仓库的几种方法 前提： 系统安装了Git 通过git config命令配置了用户名和邮箱 配置了ssh用户权限，具体配置方法见：（远程仓库关联，权限配置） 1.1. 方法一： 新建一个本地仓库 + 关联远程仓库 新建文件夹 mkdir gitDemo/获取一个存在的目录，例如gitDemo cd gitDemo git init 这样就创建了一个本地仓库 在本地的项目中，添加文件 touch index.js echo \"test\" >> index.js 提交到本地版本库 git add . git commit -m 'first commit' 关联远程仓库 本地仓库默认的分支为master 具体看章节github，创建并关联本地仓库 1.2. 方法二： 远程仓库已存在远程仓库，拉取到本地 1、http的仓库地址一般可以直接下载 比如现有仓库 https://github.com/richLpf/golang-learn.git 我们只需要通过git clone https://github.com/richLpf/golang-learn.git就可以将仓库下载到本地，golang-learn目录就是项目仓库。 如果想要改名字可以这样 git clone https://github.com/richLpf/golang-learn.git newName 这时候下载的newName就是项目仓库 2、git@通过ssh key连接的项目，一般要先配置项目权限 一般在管理员Setting页面Deploy keys将本地Git生成的SSH key放在这里，【生成方法见】 配置完成后，执行类似一的 git clone git@github.com:richLpf/golang-learn.git console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"base/忽略.html":{"url":"base/忽略.html","title":"忽略文件","keywords":"","body":"1. 忽略文件2. 注释内容3. 忽略文件夹node_module4. 忽略log文件夹下所有.log的文件5. 忽略log文件夹下及子目录下所有的.log文件6. 忽略当前路径下的文件7. 忽略文件1. 忽略文件 对于一个项目来说，可能有些文件我并不想提交，只是在本地开发使用，或者一些可以个人配置，依赖等 比如node项目中，node_modules、打包的静态文件、编辑器的配置信息，临时生成的文件等，那么我们可以定义一定的规则，过滤这些文件。 .gitignore仅仅对没有git追踪的文件或文件夹起作用 所以提交过的文件，再次加入.gitignore文件，对于git来说是无效的，要通过删除本地的文件，推送到仓库，下次就可以使忽略文件了。 首先在项目根目录下创建文件.gitignore文件 .gitignore 规范 2. 注释内容 可以适用标准的glob格式规范 匹配最后增加/，表示忽略的是目录 忽略的文件中，要过滤某些文件可以适用 ！ 取反 glob格式规范 *匹配一个字符或若干个字符，不匹配.开头的文件 ** 匹配0个或若干个字符 {a, b} 匹配a,b中的任意一个字符 [a-b] 匹配a-b中的一个字符 ！ 在匹配到的字符中取反 ？ 匹配任意一个字符，必须存在一个 下面是一份示例 待测试（一个一个测试） ``` 3. 忽略文件夹node_module node_modules/ 4. 忽略log文件夹下所有.log的文件 /log/*.log 5. 忽略log文件夹下及子目录下所有的.log文件 /log/*/.log 6. 忽略当前路径下的文件 /dist 7. 忽略文件 ``` console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"base/overview.html":{"url":"base/overview.html","title":"命令总览","keywords":"","body":"1. 命令总览1.1. 配置1.2. 仓库1.3. 基本操作1.4. 分支与合并1.5. 其他1. 命令总览 Git命令很多，这里列举下： 1.1. 配置 通过该命令可以配置Git信息，然后信息可以再后面显示 git config 1.2. 仓库 通过这两个命令可以创建Git仓库 git init git clone git remote 1.3. 基本操作 通过这几个命令可以提交文件，将文件提交到Git仓库，工作中基本这几个命令就够用了 git add git commit git push 1.4. 分支与合并 Git创建分支，检出分支 git branch git checkout 1.5. 其他 git diff git log git reset git rm console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/":{"url":"cmd/","title":"git命令","keywords":"","body":"1. git命令1. git命令 git 命令很多，分为底层命令和上层命令，我们一般使用的都是上层命令，上层命令的执行实际执行的是一个个底层命令。 这里我们将常用的上层命令列举出来，并展示其用法，方便查找和使用。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/log.html":{"url":"cmd/log.html","title":"log","keywords":"","body":"1. log1. log git log 查看git提交历史 1、git log 将会展示 commit c0749c8ff4eb9287f69fecaeb7105cb1b4f59d10 Author: richLpf Date: Thu Jul 16 10:05:01 2020 +0800 task commit efd9b2347c8a67cf49b865845a216f13edcc6faa Author: richLpf Date: Thu Jul 16 10:03:41 2020 +0800 test 我们可以看到commitid, Author, Date和提交的注释信息 2、git log -[num] 示例：git log -2 展示两条提交日志 3、git log -p 或 git log --patch 展示提交的文件修改的详细信息 4、git log --stat 5、git log --oneline 6、git log --after=\"2020-15-05\" 7、git log --after=\"2020-15-05\" --before=\"2020-25-05\" git log --since=2.weeks --until == --before 时间还可以是：yesterday, today, 10 day ago, 1 week ago, 2 month ago 8、git log --author=\"pengfei\" 9、过滤git log --grep=\"test\" 10、忽略大消息查询 git log -i --grep=\"test\" 11、过滤多个参数，查询参数中间使用\\| 连接 git log --grep=\"test\\|测试\" 12、查询单个文件提交记录 git log index.html 多个文件 git log index.html index.js 13、git log -S\"function compare\" 查找文件中的某段代码添加的提交记录 14、git log --merges 查看当前分支合并的记录 15、git log master..dev 16、定义打印日志格式 git log --pretty=format:\"%Cred%an - %ar%n %Cblue %h -%Cgreen %s %n\" git log --pretty=oneline 选项 说明 %H 提交的完整哈希值 %h 提交的简写哈希值 %T 树的完整哈希值 %t 树的简写哈希值 %P 父提交的完整哈希值 %p 父提交的简写哈希值 %an 作者名字 %ae 作者的电子邮件地址 %ad 作者修订日期（可以用 --date=选项 来定制格式） %ar 作者修订日期，按多久以前的方式显示 %cn 提交者的名字 %ce 提交者的电子邮件地址 %cd 提交日期 %cr 提交日期（距今多长时间） %s 提交说明 可以使用red等颜色 17、git log --graph 图形化展示各分支的提交历史 18、git log --no-merges 仅展示提交的版本，不展示合并分支的提交 注意：这些命令可以相互组合，下面通过几个例子来灵活的使用这些命令 1、仅展示两条数据 2、查看index.html文件的提交记录，并查询修改 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/push.html":{"url":"cmd/push.html","title":"push","keywords":"","body":"1. push1. push git push 用来同步本地仓库和远程仓库版本 git push [远程主机名] [本地分支名] [远程分支名] 例如：git push origin master:master 就是将本地分支master推送到远程主机origin的master分支 可以简写：省略远程分支名 git push origin master 标识要推送的分支名，本地和远程相同，一般情况下工作开发都是相同的。 注意 如果简写，省略本地分支名，代表删除远程分支，不会删除本地分支 git push origin :dev 标识推送了一个空的分支到远程的dev分支，本地的dev不会被删除 相同的命令 git push origin --delete dev 删除远程分支 省略本地分支和远程分支git push origin 1、查看远程主机可以使用git remote -v 2、如果当前分支和本地分支已经关联过，并且有多个远程，远程有多个相同的分支，可以增加主机名，判断推送哪个主机 3、如果关联远程主机，使用了git push -u origin master，-u默认指定了一个主机，之后推送不需要添加origin 同时省略远程主机，本地分支和远程分支 git push 如果当前分支只有一个远程分支，可以直接省略主机名。查看分支git branch -r 本地master分支和远程分支建立关联，默认指定主机 git push -u origin master 推送本地所有的分支到远程分支 git push --all origin 推送分支，我们需要先git pull拉取远程分支，同步代码或解决冲突，然后再push,不然git会提示你，如果一定要提交可以使用这个命令。不建议使用 git push --force origin 推送分支标签可以使用这个命令 git push origin --tags console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/branch.html":{"url":"cmd/branch.html","title":"branch","keywords":"","body":"1. branch1. branch 分支是Git的一大优势，有了Git分支，同一个项目可以多人同时开发，而互不干扰。而且Git的创建分支特别容易，本地指针直接改变指向，就可以创建分支,所以可以尽情的创建分支，然后开发。 git branch 查看本地分支 git branch -a 查看所有分支(包括远程分支吗？) git branch -r 查看远程分支 git branch -l git branch dev 新建分支dev git checkout dev 检出存在的分支，如果不存在检出失败，需要创建分支 检出远程分支 新建分支并和远程仓库建立联系 从某个提交版本拉取分支 从某个分支拉取分支 git branch -d dev 删除dev分支，只能删除本地分支 git branch -v 查看每个分支最后一次提交 git branch -a || --all git branch -l || --list git branch git checkout -b dev console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/checkout.html":{"url":"cmd/checkout.html","title":"checkout","keywords":"","body":"1. git checkout1. git checkout 将文件从本地仓库、远程仓库或暂存区检出到工作区 git checkout dev git checkout git checkout . console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/tag.html":{"url":"cmd/tag.html","title":"tag","keywords":"","body":"1. tag1.1. 查找标签1.2. 增加标签1.2.1. 附注标签1.2.2. 轻量标签1.2.3. 在某个提交commit-id补打标签1.2.4. 推送分支（共享分支）1.3. 检出分支，并修改1.4. 删除分支1. tag git tag 1.1. 查找标签 git tag -l/--list git tag -l \"v1.*\" -l 可以增加匹配模式 git show v1.0.0 查看特定标签 1.2. 增加标签 1.2.1. 附注标签 git tag -a v1.0.2 -m \"my version is 1.0.2\" 可以显示打标签的信息，打标签的日期，附注信息，具体的提交信息 1.2.2. 轻量标签 git tag \"v1.0.0\" git show 仅仅提供具体的提交信息 1.2.3. 在某个提交commit-id补打标签 1、首先找到对应的commit-id git log --oneline 找到一个commit-id 1502345 2、git tag -a v1.0.3 1502345 3、git show v1.0.3 查看标签信息 1.2.4. 推送分支（共享分支） git push origin v1.0.3 推送特定分支到远程仓库 git push origin --tags 推送所有标签到远程仓库 1.3. 检出分支，并修改 git checkout v1.0.3 注意，此时git无法确定分支名称，处于“分离头指针”的状态，如果你修改当前代码，提交后只能通过commit-id找到对应的修改，所以是有问题的。具体可以使用下面的方法： git checkout -b version1 v1.0.3 要修复某个标签的代码bug,可以从该标签检出，并创建新得分支，进行修改，修改完后合并上线。 1.4. 删除分支 1、方法一语法：git tag -d git tag -d v1.0.3 本地删除标签名称v1.0.3,并不会同步远程仓库，需要继续执行命令 git push origin :refs/tags/v1.0.3 2、方法二,类似删除分支的方法： git push origin --delete/-d git push origin -d v1.0.3 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/add.html":{"url":"cmd/add.html","title":"add","keywords":"","body":"1. git add1. git add 作用，将修改的文件从工作区提交到暂存区 1、git add . git add --all 简写 git add -A 提交所有变化，包括工作区修改的、新增的、删除的文件都会添加到暂存区 2、git add -u 简写 git add --update 提交修改的、删除的文件，不包括新增的文件 3、git add [file...] 提交file文件到暂存区。 例如：git add index.html index.js 提交index.html, index.js文件 4、git add -i git add 的交互式命令，输入后可以返回 *** Commands *** 1: status 2: update 3: revert 4: add untracked 5: patch 6: diff 7: quit 8: help What now> 1、status拉取文件状态，和进入交互界面显示相同 2、update可以选择修改的文件提交到暂存区 3、revert,将提交到暂存区的文件，恢复到工作区。 4、add untracked将新建的文件，添加到暂存区 5、patch 未测试出来，待测试 6、diff 详细查看文件的修改 7、quit 关闭交互命令行 8、help 帮助文档 5、git add [file] --edit|-e 打开修改的文件，编辑文件 6、git add [file] --force|-f 强制提交被忽略的文件（强烈不建议使用） 7、git add [file] --dry-run|-n 8、git add [file] --verbose|-v console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/commit.html":{"url":"cmd/commit.html","title":"commit","keywords":"","body":"1. git commit1. git commit 提交暂存区的文件到本地仓库，是原子提交，每次提交版本都会在本地库生成一个40位的哈希值，我们也叫commit-id 之后我们可以通过commit-id 回退到某个节点，或者从某个commit-id 拉取分支 git commit 使用在git add 之后，是将暂存区的内容一次提交到本地版本库，如果暂存区没有内容，则无法提交 git commit -m \"first commit\" 最常用 通常我们都用上面这个命令来提交代码，-m 后面带上本地提交的描述信息 git commit 省略参数，则会进入命令交互行，git会要求你输入描述信息，此时你可以看到要提交的文件，可以随意输入多行的描述 git commit -a -m \"message\" （慎用） -a 将工作区和暂存区git追踪的文件提交到版本库，这里的提交不包括新增的文件，因为新增的文件还没有被git管理 这样就可以直接将本地的修改提交到版本库，省略了git add 这一步操作 工作中还是建议先通过git add 提交到暂存区，再进行操作。 git commit -amend 该命令需要实践，具体见： https://www.cnblogs.com/wangrenmeng/p/10430369.html git commit --help 注意：commit提交信息可以换行，方法有： 1、git commit 进入命令行编辑换行 2、 git commit -m \"第一行 第二行 第三行\" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/reset.html":{"url":"cmd/reset.html","title":"reset","keywords":"","body":"1. reset1. reset git reset, 使用了git管理代码后，不管你进行了什么操作都可以找到痕迹，甚至你做的误操作都可以通过git reset恢复过来。 git reset 就是git的后悔药，这个真有效。 但也不建议频繁使用。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/config.html":{"url":"cmd/config.html","title":"config","keywords":"","body":"1. config1.1. 生成ssh1.2. git操作1. config 想要使用git首先需要安装，安装完毕后需要配置git信息 我们通过git config命令设置git的相关信息，这样每次提交就可以带上自己的信息 但是我们给项目绑定远程仓库后，每次提交都要输入密码，那么多项目，密码不好记还不方便。下面我们介绍下通过publickey 来绑定仓库，每次直接提交。 给项目配置publickey有两种方法，一种是直接给用户下绑定，那么拥有publickey对应私钥的主机可以访问该用户下所有的项目 单独给某个项目配置key,这样当前用户就只能访问这个项目。 1、安装git 2、git config 3、生成sshkey 4、登录github，新建项目，给项目下添加key 5、给用户添加key，可以访问所有的项目 首先需要在使用的本机上生成ssh-key，然后项目public-key加入到gitlab或githuab等远程仓库，这样我们就可以直接拉取仓库的内容。（当然，如果项目有权限的话还要添加访问，修改等权限，一般在管理员的setting选项中设置） 1.1. 生成ssh 1、先执行以下语句来判断是否已经存在本地公钥： cat ~/.ssh/id_rsa.pub 2、如果你看到一长串以 ssh-rsa或 ssh-dsa开头的字符串, 你可以跳过 ssh-keygen的步骤。否则 你可以按如下命令来生成ssh key： ssh-keygen -t rsa -C “835570372@qq.com” 3、这个指令会要求你提供一个位置和文件名去存放键值对和密码，你可以点击Enter键去使用默认值。 用以下命令获取你生成的公钥： cat ~/.ssh/id_rsa.pub 1.2. git操作 查看 git config user.name git config user.email 设置 git config --global user.name \"pengfei.lv\" git config --global user.email \"pengfei.lv@ucloud.cn\" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/merge.html":{"url":"cmd/merge.html","title":"merge","keywords":"","body":"1. git merge1. git merge 合并分支 git强大灵活的分支功能，让git可以随便使用分支，而不用担心性能问题，特别是多人合作的时候，通过不同的分支开发，可以最大程度的减少每个员工对同时代码的误操作。 一般在自己的分支上开发完毕，上线都要合并到生产环境的分支代码上的。所有学会合并代码很重要。 合并代码要注意的地方有亮点： 1、把那个分支合并到哪个分支上？ 2、合并分支存在冲突，怎么处理？ 这两个问题是分支合并中经常会出现的问题。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"cmd/alias.html":{"url":"cmd/alias.html","title":"alias","keywords":"","body":"1. alias1.1. git 别名1.1.1. 基于git别名，我们可以自定义一些常用的命令1. alias 1.1. git 别名 可以通过给git起别名的方式，减少git命令的输入 git config --global alias.br branch branch -> br 查看分支git br -a 等价于 git branch -a git config --global alias.ci commit commit -> ci 提交版本 git ci -m 'test' 等价于 git commit -m 'test' git config --global alias.st status status -> st 查看文件状态 git st 等价于 git status 1.1.1. 基于git别名，我们可以自定义一些常用的命令 1、git checkout -b newbranch 创建一个新分支，并检出到工作区 git config --global alias.new \"checkout -b\" 执行命令git new newbranch = git checkout -b newbranch 2、自定义看到最新的一次提交 原命令：git log -1 git config --global alias.last \"log -1\" 执行命令git last = git log -1 当然git的命令已经很简单了，alias的作用也可以是你觉得和自己习惯不匹配的用法，可以自行定义，这就很优秀了。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"more/":{"url":"more/","title":"git进阶","keywords":"","body":"1. git进阶1. git进阶 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"more/rep.html":{"url":"more/rep.html","title":"远程仓库","keywords":"","body":"1. 远程仓库1. 远程仓库 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"more/ssh.html":{"url":"more/ssh.html","title":"ssh公钥","keywords":"","body":"1. ssh公钥1. ssh公钥 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"more/go.html":{"url":"more/go.html","title":"go使用git","keywords":"","body":"1. go使用git1. go使用git console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"more/source.html":{"url":"more/source.html","title":"git原理","keywords":"","body":"1. git原理1. git原理 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git/":{"url":"git/","title":"工作常见问题","keywords":"","body":"1. git1. git git不难，但是想要深入了解他，你会发现其他他还是有很多难点的。所以掌握git要系统的学习一下他的命令，熟能生巧。 git目前安装一般的是版本二，版本一的化和版本二相比一些命令的操作有些变化，具体可以到官方文档查询。我们使用的是版本二。 在使用过程中，我们会列举一些常用的命令，但git命令太多，想要掌握不太可能，所以使用到再去查文档也不失为一种好的做法。 下面两个命令，可以帮助你查看文档 git [common] -h 该命令可以帮助你看到一些常用的命令，比如 git add -h [截图] git [common] --help 该命令可以打开git的文档，查看对应命令的详细用法 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git/快速上手.html":{"url":"git/快速上手.html","title":"git工作上手","keywords":"","body":"1. git工作上手1.1. 一、首先知道git是什么？1.2. 二、安装git1.3. 三、配置git1.4. 四、新建项目，使用git管理1.5. 五、新建仓库，并配置公钥1.6. 六、在githab新建仓库，并关联本地仓库1.7. 七、多人开发合作1. git工作上手 最近给新人培训了下git的使用，以为会用讲的原理，然后发现在实际使用的时候还是错误百出，所以这一章节主要写怎样快速创建一个项目仓库进行开发。 刚刚进入单位的开发新人，一般第一天就会给你git仓库权限，让你首先熟悉代码，当然也有公司第一周你就要写代码了，我见了很多新人都是直接写个demo，领导要检查直接把文件夹打包发过去，对于程序员来说这个几乎是不能接受的。 但刚刚工作的你是否对于git一知半解，却无从下手，下面我来一步步告诉你应该怎么做。 1.1. 一、首先知道git是什么？ git是一个开源的分布式管理系统，这里你可以先理解成，git是一个管理代码的工具。 1.2. 二、安装git https://git-scm.com/downloads 这里有mac、linux、windows安装的方法，根据自己的电脑安装就行了，并不难。 安装完成后，打开命令行工具，我这里以window演示： 新建一个文件夹，右键，出现了Git Gui Here 和 Git Bash Here, Gui是git提供的git图形界面工具，暂时不用，后面再讲。Bash 我们可以用来输入git命令，从而操纵git仓库。 我们点击 Git Bash Here 出现了一个命令行工具。 运行命令 git --version 查看git的版本信息 git 可以看到git的用法 1.3. 三、配置git git config --global user.name \"zhangsan\" git config --global user.email \"103233@qq.com\" 这样每次提交代码都会带上你的用户名和邮箱 1.4. 四、新建项目，使用git管理 两个新人在开发前期，新建了两个文件夹，开发同个项目，上传到一个仓库的不同分支，最后还想要合并在一起，这是不对的，所以这里强调下项目。 一般情况下，开发一个项目，作为一个项目仓库。如果这个项目需要开发不同的功能，只需要在这个项目项目仓库拉取不同的分支，开发完毕后合并到生产环境就可以了。 如果两个人一人一个项目，最好是新建两个仓库，各自部署。 这里我们开始实际操作： (1)、新建文件夹，demo,作为项目的根目录。 (2)、cd demo 进入demo目录，在当前目录下执行命令： git init 这时demo目录将成为一个git仓库。 执行ls -al 我们可以看到有个.git 文件，这里保存着git保存的版本和压缩的文件信息 (3)、git init 后默认当前分支会是master分支。 (4)、我们在demo目录下新建一个文件index.js index.js文件内容： add a index.html file (5)、假设上面一步就是我们平常开发的过程，会新建一些文件，或者修改一些文件，我们本地环境没有问题后，需要提交到git仓库。 (6)、执行git add . 命令，将会将文件保存到暂存区。执行git status 会展示当前暂存区修改的文件 (7)、执行git commit -m '注释内容' 将暂存区的文件提交的本地的git仓库。这里的git仓库还是demo文件夹，只不过git将当前版本压缩打了个镜像，放在了.git目录中。 此时我的项目demo就已经用git管理起来了，但是只有我们本地当前这个仓库，如果另一个同事要开发这个项目，没办法获取代码。所以此时我们要将git代码推送到远程仓库，这个远程仓库包括github、gitlab、gitee等，一般公司都是使用gitlab。所以我们就用github举例。 1.5. 五、新建仓库，并配置公钥 我们之前的demo项目只是在我们电脑本地，所有没法和其他人共享，那么想要共享，我们就需要远程仓库，将我们本地的项目同步到远程仓库。首先注册一个github账号，（gitlab也是一样的）。 然后新建仓库，填写必要的信息，新建项目后，会发现这个项目什么也没有，然后我们配置公钥。 这里有两种方式和本地仓库关联，一种是通过http的方式，一种是通过ssh的方式，http每次都需要去验证账号信息，不利于我们同步代码，所以我们选择ssh，只需要一次配置。 (1)、现在本地生成key (2)、将key配置到用户设置中或项目设置中 1.6. 六、在githab新建仓库，并关联本地仓库 这里有很多种关联仓库的方法，我们属于本地已经存在文件夹，所以选择第二个的命令。 执行命令： cd demo git init git add . git commit -m 'relate rep' git remote add origin git@sdfsfd git push -u origin 1.7. 七、多人开发合作 关联好仓库，就可以愉快的开发了。现在我们本地和远程都是master分支，master分支一般作为稳定分支，我们一般会git checkout -b dev 创建并检出dev分支，再dev分支上开发，开发完成后，再dev分支 git add . git commit -m 'dev' git push 执行命令合并到master git checkout master git merge dev 这样就将开发的dev分支代码合并到master分支了。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git/基础.html":{"url":"git/基础.html","title":"git基础讲解","keywords":"","body":"1. git基础讲解1.1. 最常用的命令1. git基础讲解 通过快速上手这一章节，我们新建了一个仓库，就是demo这个文件夹，执行命令ls -al 我们可以看到一个隐藏的目录.git，其中就保存了每次提交的版本信息。 我们还新建了远程仓库，并且关联了这个项目，每次通过git push 就可以将每次提交的版本就行同步，这样如果有多个人同步开发，只需要将远程仓库git clone到他的工作电脑就可以了。 这个demo项目开发的时候，我们要区分几个概念： 工作区 工作区就是我们用编辑器打开的文件，我们看到的就是工作区的代码，我们只能在工作区进行修改代码的操作 暂存区 通过命令git add我们可以将工作区的文件提交到暂存区，暂存区也是本地的一个概念 本地仓库 通过命令git commit 可以将暂存区的代码提交到本地的版本仓库，该操作为原子操作，一次会提交暂存区所有修改的文件 远程仓库 最后通过命令git push 可以将本地版本仓库的代码同步到远程仓库，远程仓库一般放在服务器上，可以供其他人浏览和拉取代码。如果在服务器上操作该仓库，那么此时对你来说，这个远程仓库就是你的本地仓库，所以本地仓库和远程仓库是一个相对的，可以相互做对方的远程仓库。 这个做法就体现了git的强大，你可以在本地进行各种操作提交版本，不需要联网，当有网的时候同步到远程仓库就可以了。 这样你本地电脑坏，可以直接从远程仓库拉取代码，远程挂了，可以直接将本地的推送到远程仓库，这就是互相备份的功能。 1.1. 最常用的命令 git status 通常我们会使用这个命令用来查看本地文件的修改。 当我们将仓库的代码git clone到本地，进入项目执行git status这时候会显示工作区是干净的，代表我们没有对当前文件做任何修改 接着当我们修改文件，后执行git status 会发现提示我们工作区文件有了修改 接着我们执行git add . 之后再执行git status 会提示暂存区有文件修改，接着commit后，执行git status,会显示工作区干净。 所有这个命令很重要，我们修改的文件可以通过这个命令提示出来 当然具体修改了什么内容，我们可以查看git diff命令 git add 这个命令，执行的形式常常有 1、git add .2、git add [fileName] 3、git add [fileName] [fileName] 将修改的文件，提交到暂存区 git commit 1、git commit -m \"v0.1.1\" 提交文件到本地版本库 2、git commit -m \"v0.1.1\" -m \"修复bug\" 提交信息将会换行展示 3、git commit -m \"v0.1.1 修复版本\" 提交信息会换行，同上 git push 1、git push 2、git push --set-upstream origin dev 3、git push origin master 4、git push origin :bugfix 删除远程仓库地址，本地分支没有没有删除 git push origin --delete master 5、git push -u origin 6、git push -all 7、git push -force git diff 对比两次修改的差异 git diff 默认比较工作区和暂存区 git diff HEAD [file] 比较工作区和版本仓库文件的区别 git diff --cached [file] 比较暂存区和本地版本仓库的区别 git diff commit-id [file] 比较工作区和commit-id本地仓库版本文件的区别 git diff --cached commit-id [file] 比较暂存区和commit-id本地仓库版本文件的区别 git diff comit-id commit-id 比较两个本地仓库版本的区别 git diff > patch ? git stash git stash save \"test\" git stash apply \"test\" git stash pop git stash list .gitignore文件 该文件的作用是忽略某些不需要添加到版本库的文件，由于git记录版本，相当于每次将所有文件打个镜像，如果每次都有大文件记录，那么git拉取代码，占用的空间都会很大，所有比较好的做法就是将这些文件忽略，比如：安装的依赖，配置文件，二进制文件，打包的文件，临时文件等，前端常忽略有： # 忽略某个文件,直接写他的名字就可以 main.exe # 使用* build/*.js # 忽略任何目录下的文件夹 node_modules/ # 忽略当前目录下的文件,不会忽略dist/test /test # 忽略dist目录及其子目录下的所有.txt文件 dist/**/*.txt console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git/cmd.html":{"url":"git/cmd.html","title":"常用命令","keywords":"","body":"1. 常用命令1. 常用命令 git add (完成) git commit git push git stash git log git status git tag git merge git branch git checkout git clone git pull git fetch git remote git config console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git/提示.html":{"url":"git/提示.html","title":"git常见提示","keywords":"","body":"1. git常见提示1. git常见提示 git push常见操作 $ git push fatal: The current branch dev has no upstream branch. To push the current branch and set the remote as upstream, use git push --set-upstream origin dev $ git push --set-upstream origin dev ERROR: Repository not found. fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. git 操作常见问题 git 命令太多记不住 git记住常用的几个命令就可以使用了，遇到问题再去查对应的命令也完全来得及 git命令git push --all origin git push -u origin 有的- --什么时候用？ git 命令简写使用- 命令全名使用-- 类似有 git log --pretty git log -p git push --force git push -f console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git/版本管理.html":{"url":"git/版本管理.html","title":"git分支管理","keywords":"","body":"1. git版本管理1. git版本管理 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git/工作问题.html":{"url":"git/工作问题.html","title":"git工作中常见问题","keywords":"","body":"1. git工作中常见问题2. 删除git仓库中的大文件2.1. 删除Git历史提交的文件2.2. git切换远程仓库1. git工作中常见问题 如何快速新建分支并和远程仓库关联 2. 删除git仓库中的大文件 http://vra.github.io/2018/05/20/git-remove-large-file/ 一、配置项目权限 二、图形化工具 sourcetree 三、多人合作分支管理 四、误提交回滚 五、处理冲突 git分支的回退操作，需要实践 git操作，命令行及理解 不小心提交push 怎么回退？ 工具使用 sourcetree 多人协作分支管理措施 git 冲突处理 第三方登录github 误删分支操作，找回分支 git 报错处理 在IDEA中进行分支切换时，出现如此错误，导致无法正常切换：error: The following untracked working tree files would be overwritten by checkout 通过错误提示可知，是由于一些untracked working tree files引起的问题。所以只要解决了这些untracked的文件就能解决这个问题。 解决方式： 打开SourceTree通过命令行，进入本地版本仓库目录下，直接执行git clean -d -fx即可。可能很多人都不明白-d，-fx到底是啥意思，其实git clean -d -fx表示：删除 一些 没有 git add 的 文件； git clean 参数 -n 显示将要删除的文件和目录； -x -----删除忽略文件已经对git来说不识别的文件 -d -----删除未被添加到git的路径中的文件 -f -----强制运行 git clean -n git clean -df git clean -f 误删分支操作 https://blog.csdn.net/fdipzone/article/details/50616386 https://www.runoob.com/git/git-commit-history.html 2.1. 删除Git历史提交的文件 1、不小心将账号密码发布到github? 2、上传了很长时间的大文件，导致仓库过大，需要删除历史提交 2.2. git切换远程仓库 查询远程仓库 git remote -v 添加远程仓库 git remote add origin https://github.com/richLpf/gitbook.git 再添加一个远程仓库 git remote set-url --add origin htts://url 删除远程仓库 git remote rm origin console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git/分支管理.html":{"url":"git/分支管理.html","title":"git分支管理","keywords":"","body":"1. git分支管理1.1. git多人开发分支管理1.1.1. 正常的分支管理策略1.1.2. 我们建议使用的分支1. git分支管理 git 分支是git最为优秀的特性之一，让git可以在众多版本管理系统中脱颖而出，所以了解git的分支产生机制，可以帮助你更快的了解和管理分支。 开发过程中我们推荐使用分支，这样可以区分不同的开发功能，通过合并进行代码的更新 git版本的原理就想写一个系列的书籍 首先我们写了几篇文章，我们给这几篇文章合并在一些起了一个名字《git基础草稿1》 这几篇文章可以看作是git管理的内容，书名《git基础草稿1》就像分支master 这时候，有多个小组A、B、C需要继续给这本书进行内容的增删改查，但是又想保存这本书的当前的内容，防止我们把这本书改残。 这时候我们复印了这本书起名字叫《git基础草稿2》 1.1. git多人开发分支管理 1.1.1. 正常的分支管理策略 master(生产环境) develop(预发布分支) test(测试分支) test1 test2 feature(功能分支) feature1 feature2 bugfix（分支） bugfix1 bugfix2 1.1.2. 我们建议使用的分支 master（生产环境） pre（预发布、测试分支） feature-xx(功能分支) lpf bugfix（修复bug分支） feature1（功能分支） console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git/sourceTree.html":{"url":"git/sourceTree.html","title":"git工具推荐","keywords":"","body":"1.1. git图形化工具推荐1.1.1. 一、安装1.1.2. 二、配置1.1.3. 三、创建或引入一个项目1.1.4. 工作示例1.1. git图形化工具推荐 git有很多优秀的图形管理界面，就想window可以帮助更多的小白通过点点点，操作电脑。git的图形界面也是这样的，帮你不必使用git命令行工具，一行行的输入命令，通过图形点击就可以实现这些操作命令。 常见的我用过的有SourceTree, smartGit 这里我主要推荐SourceTree,首先免费，其次操作简单，内容展示比较全。 1.1.1. 一、安装 下载地址：SourceTree 具体安装过程省略，可能需要翻墙。 1.1.2. 二、配置 工具栏 -> 选项 1、填写用户名称和电子邮件地址，作为后面提交代码的信息展示 2、SSH客户端配置 首先需要电脑安装git，并生成key, 生成key的方法这里有两种 1、通过git命令行生成，具体过程可以参考章节git生成sshkey 2、通过sourceTree，ssh助手生成key 通常windows电脑的key都在User\\user.ssh\\id_rsa下，选择协议使用OpenSSH linux电脑的key一般存在root/.ssh 目录，其中一个公钥一个私钥。 公钥和私钥的用途。 1.1.3. 三、创建或引入一个项目 点击主界面tab切换后面的+号，打开如下面板 1、local 可以展示当前我们本地打开的项目有哪些？ 2、remote，sourceTree会记录你的远程仓库地址，你可以引入远程仓库内任意的项目 3、clone，相当于git clone,只要有项目地址就可以将项目clone到本地 4、add 如果你本地有个git项目，那么你可以直接引入 5、create 选择一个不是仓库的文件夹，创建一个git仓库，相当于git init 这样我们就可以通过sourceTree使用git命令操作项目了。 1.1.4. 工作示例 sourceTree 整个界面分成了一个区域，这里我们重点介绍下这7个区域，也是我们常用的地方 第一个区域，主要是git的常用操作，包括 提交（git add）、 拉取（git pull）、 推送（git push）、 获取（git fetch）、 分支（git branch、git checkout、git push -d branch） 合并（git merge） 贮藏（git stash）、 丢弃（git reset --HEAD） 标签（git tag） 第二个区域，主要是一些功能性操作，方便一键操作 git工作流，主要是自动创建不同的分支流程，帮助多人合作开发管理分支，类似我们章节分支管理中的内容 远端：点击展示当前项目远程仓库信息，提供git remote -v 和修改删除的功能 命令行模式，window下快速打开bash命令行 资源管理器，一键打开项目所在的文件夹目录 设置远程仓库配置和git配置信息设置 第三个工作区 WORKSPACE 工作区信息 文件状态，主要展示当前项目你追踪的修改、删除的文件或未追踪，新建的文件 git status 点击文件状态后，区域5变成了下面这个样子，将git的仓库分成了工作区（未暂存区，暂存区、git diff区） History, git log, 暂时文件提交的历史和说明，分支合并的路径等信息 git grash Search 提供了对git log的一个筛选和查找 第四个工作区 分支 使用的命令包括 git branch -a 很直观的可以看到本地当前创建的分支 标签：展示所有的标签内容 远程仓库所有的分支 贮藏区：相当于git stash，保存在本地的临时代码 第五一个区域 主要配置各个tab切换展示不同的内容，筛选，日志数据，文件状态分区展示，主要要的是清晰的展示了各个分支之间的关系和来龙去脉 第六工作区 上面主要展示了，git logs commit-id和两个版本之间的修改内容 第七个工作区 主要展示某个commit-id修改内容的差异 右边还可以通过回滚区块，来改动小地方的恢复，非长方便 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"github/":{"url":"github/","title":"github","keywords":"","body":"1. github1.1. github简介1.2. 通过github部署静态网站1.3. github action自动发布1. github 1.1. github简介 github是一个公共的远程仓库，可以理解为你的电脑，存储了文件，github就是一个打电脑而已，放在不同的地方，便于容灾。 git是一个分布式管理工具，使用git我们可以方便的管理我们每一份代码的每个版本。 github是公共的仓库，只要我们注册了账号，就可以将我们的代码放在github仓库，方便世界各地不同的网友去查看和使用。 官方地址: https://github.com 1.2. 通过github部署静态网站 示例：将本文档通过github部署 1.3. github action自动发布 首先我们注册一个账号，登录 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"github/认识.html":{"url":"github/认识.html","title":"github","keywords":"","body":"1. github1. github 如何新建一个仓库，并导入一个项目。 本地已经有项目 本地没有项目 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"gitlab/":{"url":"gitlab/","title":"gitlab","keywords":"","body":"1. gitlab1. gitlab 使用gitlab的CICD,前提条件是需要执行一些配置的。 首先要触发CI, 我们要在项目的根目录下新建文件.gitlab-ci.yml 具体配置见CICD章节 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"gitlab/快速使用.html":{"url":"gitlab/快速使用.html","title":"gitlab使用","keywords":"","body":"1. gitlab使用1. gitlab使用 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"gitlab/部署.html":{"url":"gitlab/部署.html","title":"gitlab部署","keywords":"","body":"1. gitlab部署1. gitlab部署 https://www.cnblogs.com/restran/p/4063880.html https://about.gitlab.com/install/#centos-7 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"gitlab/CICD.html":{"url":"gitlab/CICD.html","title":"gitlabCICD","keywords":"","body":"1. gitlabCICD1. gitlabCICD 我们新建项目cicdTest项目， mkdir cicdTest touch index.html index.html文件 CICD Hello CICD! 首先要触发CI, 我们要在项目的根目录下新建文件.gitlab-ci.yml 此时cicdTest目录结构为 - index.html - .gitlab-ci.yml 下面我们介绍下.gitlab-ci.yml 具体的配置文件 .gitlab-ci.yml 首先我们选择要执行cicd使用的基础镜像 # 运行该文件需要使用的镜像和指定的版本 image: nginx 接着我们写cicd执行的任务,.gitlab-ci.yml 一、有很多预定义的环境变量，可以使用，具体用法如下，$CI_JOB_STAGE打印出来test image: nginx:1.18.0 test_variable: stage: test script: - echo $CI_JOB_STAGE 二、.gitlab-ci.yml 还有可以自定义变量 variables: TEST: \"HELLO WORLD\" image: nginx:1.18.0 test_variable: stage: test script: - echo $CI_JOB_STAGE - echo \"$TEST\" //\"HELLO WORLD\" 三、当然你也可以在gitlab的页面上创建自定义变量 1、setting > CI/CD, 展开\"变量\"部分 2、添加变量，填写信息 创建的变量可以像第二部一样在.gitlab-ci.yml中调用 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"gitbook/":{"url":"gitbook/","title":"gitbook","keywords":"","body":"1. gitbook的使用1.1. gitbook-cli安装1.2. 创建项目1.3. 生成目录1.4. gitbook目录结构1. gitbook的使用 1.1. gitbook-cli安装 npm i -g gitbook-cli gitbook -V 1.2. 创建项目 mkdir git-learn cd git-learn 1.3. 生成目录 gitbook init gitbook serve 目录结构见SUMMARY.md 1.4. gitbook目录结构 如何在markdown中打印项目目录结构 https://www.jianshu.com/p/e38a07f824a2 Gitbook各种使用方法参考文章 https://juejin.im/post/6844903793033740302 Gitbook使用方法 https://yangjh.oschina.io/gitbook/faq/Plugins.html gitbook插件参考 https://www.jianshu.com/p/427b8bb066e6 可参考优秀的文档 https://snowdreams1006.gitbook.io/www/#ke-long-wang-zhan console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"gitbook/plugin.html":{"url":"gitbook/plugin.html","title":"插件","keywords":"","body":"1. 插件1.1. 安装插件1.2. 常用插件1.3. 其他1.4. book.json文件1.5. 各个插件展示1.5.1. 目录相关内容1.6. 静态文件利用github进行评论的方法gittalk1. 插件 1.1. 安装插件 // book.json文件，见根目录 touch book.json // 下载插件使用gitbook install,不要使用npm,会出现插件不起作用的情况,可能和网络有关 gitbook install // 安装插件（不推荐使用） npm install gitbook-plugin-[插件名] 1.2. 常用插件 删除原有插件 删除自带的gitbook标识 安装分享、搜索插件 目录插件 目录折叠 页面目录导航 插入音频 插入音乐 插入视频 插入图片 导出pdf等格式电子书 导入github点赞内容 赞助 页面过长返回顶部 页面阅读统计 页面code复制 页面评论 跳转github编辑页面 页面待办事件 1.3. 其他 打印项目目录https://www.npmjs.com/package/treer 插入音频 视频插入 插入音乐 github仓库内容 1.4. book.json文件 { \"title\": \"Git入门到进阶\", \"description\": \"Git入门，Git常用的方法和工作中常见的问题，gitlab、github等仓库的使用\", \"author\": \"pengfei.lv\", \"language\": \"zh-hans\", \"root\": \".\", \"plugins\": [ \"edit-link\", //在github编辑 \"copy-code-button\", //复制代码 \"splitter\", //调节左侧边栏 \"pageview-count\", //统计浏览量 \"popup\", \"-sharing\", //删除gitbook自带的分享功能 \"sharing-plus\", //分享插件 \"chapter-fold\", //目录折叠 \"expandable-chapters\", \"-lunr\", \"github\", //github图表 \"gittalk\", //github评论 \"anchor-navigation-ex\", //页面导航 \"simple-page-toc\" // 页面目录 ], \"pluginsConfig\": { \"github-buttons\": { \"repo\": \"richLpf/gitbook\", \"types\": [ \"star\" ], \"size\": \"small\" }, \"edit-link\": { \"base\": \"https://github.com/richLpf/gitbook\", \"label\": \"编辑当前页面\" }, \"sharing\": { \"all\": [\"weibo\", \"qq\", \"qzone\", \"douban\"] }, \"chapter-fold\":{}, \"github\": { \"url\": \"https://github.com/richLpf/gitbook\" }, \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true }, \"gittalk\": { \"clientID\": \"e893b71fc36998d82f8e\", \"clientSecret\": \"d25b2490666b9105dea0c7ecfbae294a4eef9caa\", \"repo\": \"gitbook\", \"owner\": \"richLpf\", \"admin\": [ \"richLpf\" ], \"distractionFreeMode\": false }, \"anchor-navigation-ex\": { \"associatedWithSummary\": true } } } 1.5. 各个插件展示 1.5.1. 目录相关内容 \"simple-page-toc\"生成右侧悬浮目录 { \"plugins\": [ \"page-treeview\" ], \"pluginsConfig\": { \"page-treeview\": { \"copyright\": \"Copyright &#169; aleen42\", \"minHeaderCount\": \"2\", \"minHeaderDeep\": \"2\" } } } 如图所示：gitbook-menu.png \"page-treeview\"生成页面头部目录 { \"plugins\": [ \"page-treeview\" ], \"pluginsConfig\": { \"page-treeview\": { \"copyright\": \"Copyright &#169; aleen42\", \"minHeaderCount\": \"2\", \"minHeaderDeep\": \"2\" } } } 如图所示： flexible-alerts 警报 > [!NOTE] > 这是一个简单的Note类型的使用，所有的属性都是默认值。 1.6. 静态文件利用github进行评论的方法gittalk \"gittalk\": { \"clientID\": \"e893b71fc36998d82f8e\", \"clientSecret\": \"d25b2490666b9105dea0c7ecfbae294a4eef9caa\", \"repo\": \"gitbook\", \"owner\": \"richLpf\", \"admin\": [ \"richLpf\" ], \"distractionFreeMode\": false } 参数获取方法： console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"gitbook/deploy.html":{"url":"gitbook/deploy.html","title":"部署","keywords":"","body":"1. 部署1. 部署 将gitbook部署在github页面上 参考文档 https://juejin.im/post/6844903793033740302 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"gitbook/more.html":{"url":"gitbook/more.html","title":"常用插件","keywords":"","body":"1. 常用插件1. 常用插件 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}